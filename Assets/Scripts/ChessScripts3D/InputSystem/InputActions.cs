//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.6.3
//     from Assets/Scripts/ChessScripts3D/InputSystem/InputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputActions: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputActions"",
    ""maps"": [
        {
            ""name"": ""GameCamera"",
            ""id"": ""01b6bbe5-7cd6-4322-8eac-076a37e96fd4"",
            ""actions"": [
                {
                    ""name"": ""CamMove"",
                    ""type"": ""Value"",
                    ""id"": ""c0771a4d-d6cd-480d-a906-4a73b564fa0f"",
                    ""expectedControlType"": ""Vector3"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""CamZoom"",
                    ""type"": ""Value"",
                    ""id"": ""6d93abc2-940b-43bd-a622-c286d3817421"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""ActiveCamRotate"",
                    ""type"": ""Button"",
                    ""id"": ""99d75564-bac3-421c-9b2f-185bf7a9a009"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""CamRotateX"",
                    ""type"": ""Value"",
                    ""id"": ""e0051266-9c45-4293-a597-486bcad5eff3"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""CamRotateY"",
                    ""type"": ""Value"",
                    ""id"": ""c7dc4eca-35de-4714-95de-426db2cbf951"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""GoHomePos"",
                    ""type"": ""Button"",
                    ""id"": ""e8fc96f9-83ac-42cf-b3e3-cfe0da4ee9cf"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""3D Vector"",
                    ""id"": ""75f14e20-57dd-4a80-8c7d-f06fcae148a2"",
                    ""path"": ""3DVector(mode=2)"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CamMove"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""b3e3dc10-b1cc-463b-804c-7783d2ea3723"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""My control scheme"",
                    ""action"": ""CamMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""c3c8504d-29a8-477d-aef8-4c86595243a2"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""My control scheme"",
                    ""action"": ""CamMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""1b39e36c-c69c-41ba-a9f8-d4f1d9d1ff63"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""My control scheme"",
                    ""action"": ""CamMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""d52f83a3-aad2-4e11-ba3b-04ab7664c1f9"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""My control scheme"",
                    ""action"": ""CamMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""forward"",
                    ""id"": ""2e609b5c-63a6-43f8-a915-b04bf5b8306d"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""My control scheme"",
                    ""action"": ""CamMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""backward"",
                    ""id"": ""b46e9663-940e-4b4f-ab6d-2b962dc689bd"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""My control scheme"",
                    ""action"": ""CamMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""79cef3e4-dfb6-429a-8cb6-873fab3dbb5c"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CamZoom"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""475097c2-76af-4718-9144-0c4044919d4d"",
                    ""path"": ""<Mouse>/scroll/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""My control scheme"",
                    ""action"": ""CamZoom"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""5a698800-963e-4386-a759-fedbbac51684"",
                    ""path"": ""<Mouse>/scroll/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""My control scheme"",
                    ""action"": ""CamZoom"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""XAxis"",
                    ""id"": ""f239706b-3ea3-4850-aba1-4f0b593f746c"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CamRotateX"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""4062605a-bf7e-42ba-a59e-6884b340b164"",
                    ""path"": ""<Mouse>/delta/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""My control scheme"",
                    ""action"": ""CamRotateX"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""5dfda7e4-8f22-48f5-909b-5ab356dfbd3d"",
                    ""path"": ""<Mouse>/delta/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""My control scheme"",
                    ""action"": ""CamRotateX"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""7715dd74-2485-47f6-b65e-a248c1086a47"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""My control scheme"",
                    ""action"": ""ActiveCamRotate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3c181917-6217-4774-9401-13730b255cf2"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""GoHomePos"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""c98728de-e0f1-49e2-9267-e4d7b3f714a3"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CamRotateY"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""92895614-07cb-4b7e-bf7d-aeddda2be6d1"",
                    ""path"": ""<Mouse>/delta/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CamRotateY"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""3f38f70a-94d3-4fa1-85bc-7ddefafe8103"",
                    ""path"": ""<Mouse>/delta/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CamRotateY"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        },
        {
            ""name"": ""GameClick"",
            ""id"": ""c1f44e09-aee9-48dc-bf72-c9ef96d0374a"",
            ""actions"": [
                {
                    ""name"": ""Click"",
                    ""type"": ""PassThrough"",
                    ""id"": ""1d378288-64ba-46ce-8d91-2a24fe006906"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""5b853b24-9b6c-4119-ab5f-6b4a7392a54f"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""My control scheme"",
                    ""action"": ""Click"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""My control scheme"",
            ""bindingGroup"": ""My control scheme"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<VirtualMouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // GameCamera
        m_GameCamera = asset.FindActionMap("GameCamera", throwIfNotFound: true);
        m_GameCamera_CamMove = m_GameCamera.FindAction("CamMove", throwIfNotFound: true);
        m_GameCamera_CamZoom = m_GameCamera.FindAction("CamZoom", throwIfNotFound: true);
        m_GameCamera_ActiveCamRotate = m_GameCamera.FindAction("ActiveCamRotate", throwIfNotFound: true);
        m_GameCamera_CamRotateX = m_GameCamera.FindAction("CamRotateX", throwIfNotFound: true);
        m_GameCamera_CamRotateY = m_GameCamera.FindAction("CamRotateY", throwIfNotFound: true);
        m_GameCamera_GoHomePos = m_GameCamera.FindAction("GoHomePos", throwIfNotFound: true);
        // GameClick
        m_GameClick = asset.FindActionMap("GameClick", throwIfNotFound: true);
        m_GameClick_Click = m_GameClick.FindAction("Click", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // GameCamera
    private readonly InputActionMap m_GameCamera;
    private List<IGameCameraActions> m_GameCameraActionsCallbackInterfaces = new List<IGameCameraActions>();
    private readonly InputAction m_GameCamera_CamMove;
    private readonly InputAction m_GameCamera_CamZoom;
    private readonly InputAction m_GameCamera_ActiveCamRotate;
    private readonly InputAction m_GameCamera_CamRotateX;
    private readonly InputAction m_GameCamera_CamRotateY;
    private readonly InputAction m_GameCamera_GoHomePos;
    public struct GameCameraActions
    {
        private @InputActions m_Wrapper;
        public GameCameraActions(@InputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @CamMove => m_Wrapper.m_GameCamera_CamMove;
        public InputAction @CamZoom => m_Wrapper.m_GameCamera_CamZoom;
        public InputAction @ActiveCamRotate => m_Wrapper.m_GameCamera_ActiveCamRotate;
        public InputAction @CamRotateX => m_Wrapper.m_GameCamera_CamRotateX;
        public InputAction @CamRotateY => m_Wrapper.m_GameCamera_CamRotateY;
        public InputAction @GoHomePos => m_Wrapper.m_GameCamera_GoHomePos;
        public InputActionMap Get() { return m_Wrapper.m_GameCamera; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(GameCameraActions set) { return set.Get(); }
        public void AddCallbacks(IGameCameraActions instance)
        {
            if (instance == null || m_Wrapper.m_GameCameraActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_GameCameraActionsCallbackInterfaces.Add(instance);
            @CamMove.started += instance.OnCamMove;
            @CamMove.performed += instance.OnCamMove;
            @CamMove.canceled += instance.OnCamMove;
            @CamZoom.started += instance.OnCamZoom;
            @CamZoom.performed += instance.OnCamZoom;
            @CamZoom.canceled += instance.OnCamZoom;
            @ActiveCamRotate.started += instance.OnActiveCamRotate;
            @ActiveCamRotate.performed += instance.OnActiveCamRotate;
            @ActiveCamRotate.canceled += instance.OnActiveCamRotate;
            @CamRotateX.started += instance.OnCamRotateX;
            @CamRotateX.performed += instance.OnCamRotateX;
            @CamRotateX.canceled += instance.OnCamRotateX;
            @CamRotateY.started += instance.OnCamRotateY;
            @CamRotateY.performed += instance.OnCamRotateY;
            @CamRotateY.canceled += instance.OnCamRotateY;
            @GoHomePos.started += instance.OnGoHomePos;
            @GoHomePos.performed += instance.OnGoHomePos;
            @GoHomePos.canceled += instance.OnGoHomePos;
        }

        private void UnregisterCallbacks(IGameCameraActions instance)
        {
            @CamMove.started -= instance.OnCamMove;
            @CamMove.performed -= instance.OnCamMove;
            @CamMove.canceled -= instance.OnCamMove;
            @CamZoom.started -= instance.OnCamZoom;
            @CamZoom.performed -= instance.OnCamZoom;
            @CamZoom.canceled -= instance.OnCamZoom;
            @ActiveCamRotate.started -= instance.OnActiveCamRotate;
            @ActiveCamRotate.performed -= instance.OnActiveCamRotate;
            @ActiveCamRotate.canceled -= instance.OnActiveCamRotate;
            @CamRotateX.started -= instance.OnCamRotateX;
            @CamRotateX.performed -= instance.OnCamRotateX;
            @CamRotateX.canceled -= instance.OnCamRotateX;
            @CamRotateY.started -= instance.OnCamRotateY;
            @CamRotateY.performed -= instance.OnCamRotateY;
            @CamRotateY.canceled -= instance.OnCamRotateY;
            @GoHomePos.started -= instance.OnGoHomePos;
            @GoHomePos.performed -= instance.OnGoHomePos;
            @GoHomePos.canceled -= instance.OnGoHomePos;
        }

        public void RemoveCallbacks(IGameCameraActions instance)
        {
            if (m_Wrapper.m_GameCameraActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IGameCameraActions instance)
        {
            foreach (var item in m_Wrapper.m_GameCameraActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_GameCameraActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public GameCameraActions @GameCamera => new GameCameraActions(this);

    // GameClick
    private readonly InputActionMap m_GameClick;
    private List<IGameClickActions> m_GameClickActionsCallbackInterfaces = new List<IGameClickActions>();
    private readonly InputAction m_GameClick_Click;
    public struct GameClickActions
    {
        private @InputActions m_Wrapper;
        public GameClickActions(@InputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Click => m_Wrapper.m_GameClick_Click;
        public InputActionMap Get() { return m_Wrapper.m_GameClick; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(GameClickActions set) { return set.Get(); }
        public void AddCallbacks(IGameClickActions instance)
        {
            if (instance == null || m_Wrapper.m_GameClickActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_GameClickActionsCallbackInterfaces.Add(instance);
            @Click.started += instance.OnClick;
            @Click.performed += instance.OnClick;
            @Click.canceled += instance.OnClick;
        }

        private void UnregisterCallbacks(IGameClickActions instance)
        {
            @Click.started -= instance.OnClick;
            @Click.performed -= instance.OnClick;
            @Click.canceled -= instance.OnClick;
        }

        public void RemoveCallbacks(IGameClickActions instance)
        {
            if (m_Wrapper.m_GameClickActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IGameClickActions instance)
        {
            foreach (var item in m_Wrapper.m_GameClickActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_GameClickActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public GameClickActions @GameClick => new GameClickActions(this);
    private int m_MycontrolschemeSchemeIndex = -1;
    public InputControlScheme MycontrolschemeScheme
    {
        get
        {
            if (m_MycontrolschemeSchemeIndex == -1) m_MycontrolschemeSchemeIndex = asset.FindControlSchemeIndex("My control scheme");
            return asset.controlSchemes[m_MycontrolschemeSchemeIndex];
        }
    }
    public interface IGameCameraActions
    {
        void OnCamMove(InputAction.CallbackContext context);
        void OnCamZoom(InputAction.CallbackContext context);
        void OnActiveCamRotate(InputAction.CallbackContext context);
        void OnCamRotateX(InputAction.CallbackContext context);
        void OnCamRotateY(InputAction.CallbackContext context);
        void OnGoHomePos(InputAction.CallbackContext context);
    }
    public interface IGameClickActions
    {
        void OnClick(InputAction.CallbackContext context);
    }
}
