//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.6.3
//     from Assets/Scripts/ChessScripts3D/InputActions/InputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputActions: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputActions"",
    ""maps"": [
        {
            ""name"": ""GameCamera"",
            ""id"": ""01b6bbe5-7cd6-4322-8eac-076a37e96fd4"",
            ""actions"": [
                {
                    ""name"": ""CamMove"",
                    ""type"": ""Value"",
                    ""id"": ""c0771a4d-d6cd-480d-a906-4a73b564fa0f"",
                    ""expectedControlType"": ""Vector3"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""3D Vector"",
                    ""id"": ""75f14e20-57dd-4a80-8c7d-f06fcae148a2"",
                    ""path"": ""3DVector(mode=1)"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CamMove"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""b3e3dc10-b1cc-463b-804c-7783d2ea3723"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""My control scheme"",
                    ""action"": ""CamMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""c3c8504d-29a8-477d-aef8-4c86595243a2"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""My control scheme"",
                    ""action"": ""CamMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""1b39e36c-c69c-41ba-a9f8-d4f1d9d1ff63"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""My control scheme"",
                    ""action"": ""CamMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""d52f83a3-aad2-4e11-ba3b-04ab7664c1f9"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""My control scheme"",
                    ""action"": ""CamMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""forward"",
                    ""id"": ""2e609b5c-63a6-43f8-a915-b04bf5b8306d"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""My control scheme"",
                    ""action"": ""CamMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""backward"",
                    ""id"": ""b46e9663-940e-4b4f-ab6d-2b962dc689bd"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""My control scheme"",
                    ""action"": ""CamMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""My control scheme"",
            ""bindingGroup"": ""My control scheme"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<VirtualMouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // GameCamera
        m_GameCamera = asset.FindActionMap("GameCamera", throwIfNotFound: true);
        m_GameCamera_CamMove = m_GameCamera.FindAction("CamMove", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // GameCamera
    private readonly InputActionMap m_GameCamera;
    private List<IGameCameraActions> m_GameCameraActionsCallbackInterfaces = new List<IGameCameraActions>();
    private readonly InputAction m_GameCamera_CamMove;
    public struct GameCameraActions
    {
        private @InputActions m_Wrapper;
        public GameCameraActions(@InputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @CamMove => m_Wrapper.m_GameCamera_CamMove;
        public InputActionMap Get() { return m_Wrapper.m_GameCamera; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(GameCameraActions set) { return set.Get(); }
        public void AddCallbacks(IGameCameraActions instance)
        {
            if (instance == null || m_Wrapper.m_GameCameraActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_GameCameraActionsCallbackInterfaces.Add(instance);
            @CamMove.started += instance.OnCamMove;
            @CamMove.performed += instance.OnCamMove;
            @CamMove.canceled += instance.OnCamMove;
        }

        private void UnregisterCallbacks(IGameCameraActions instance)
        {
            @CamMove.started -= instance.OnCamMove;
            @CamMove.performed -= instance.OnCamMove;
            @CamMove.canceled -= instance.OnCamMove;
        }

        public void RemoveCallbacks(IGameCameraActions instance)
        {
            if (m_Wrapper.m_GameCameraActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IGameCameraActions instance)
        {
            foreach (var item in m_Wrapper.m_GameCameraActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_GameCameraActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public GameCameraActions @GameCamera => new GameCameraActions(this);
    private int m_MycontrolschemeSchemeIndex = -1;
    public InputControlScheme MycontrolschemeScheme
    {
        get
        {
            if (m_MycontrolschemeSchemeIndex == -1) m_MycontrolschemeSchemeIndex = asset.FindControlSchemeIndex("My control scheme");
            return asset.controlSchemes[m_MycontrolschemeSchemeIndex];
        }
    }
    public interface IGameCameraActions
    {
        void OnCamMove(InputAction.CallbackContext context);
    }
}
